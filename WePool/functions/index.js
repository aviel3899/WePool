/**
 * Import function triggers from their respective submodules:
 *
 * const {onCall} = require("firebase-functions/v2/https");
 * const {onDocumentWritten} = require("firebase-functions/v2/firestore");
 *
 * See a full list of supported triggers at https://firebase.google.com/docs/functions
 */

// ◊ô◊ô◊ë◊ï◊ê ◊î◊°◊§◊®◊ô◊ï◊™ ◊î◊†◊ì◊®◊©◊ï◊™
const functions = require("firebase-functions"); // ◊î◊ú◊ô◊ë◊î ◊©◊ú Cloud Functions
const admin = require("firebase-admin"); // (◊ê◊ï◊§◊¶◊ô◊ï◊†◊ú◊ô) ◊ê◊ù ◊¶◊®◊ô◊ö ◊í◊ô◊©◊î ◊ú-Firestore/Auth ◊û◊¶◊ì ◊î◊©◊®◊™

// ◊ê◊ù ◊ê◊™◊î ◊¶◊®◊ô◊ö ◊ê◊™ ◊î-Admin SDK (◊ú◊û◊©◊ú, ◊í◊ô◊©◊î ◊ô◊©◊ô◊®◊î ◊ú-Firestore), ◊ë◊ò◊ú ◊ê◊™ ◊î◊î◊¢◊®◊î ◊î◊ë◊ê◊î:
admin.initializeApp();

// ◊ô◊ô◊ë◊ï◊ê ◊°◊§◊®◊ô◊ô◊™ ◊î◊ú◊ß◊ï◊ó ◊©◊ú Google Maps
// ◊ï◊ì◊ê ◊©◊î◊™◊ß◊†◊™ ◊ê◊ï◊™◊î! ◊î◊®◊•: npm install @googlemaps/google-maps-services-js
// ◊ë◊™◊ï◊ö ◊™◊ô◊ß◊ô◊ô◊™ functions
const { Client } = require("@googlemaps/google-maps-services-js");
const mapsClient = new Client({}); // ◊ê◊™◊ó◊ï◊ú ◊î◊ú◊ß◊ï◊ó

/**
 * ◊§◊ï◊†◊ß◊¶◊ô◊î ◊û◊°◊ï◊í Callable - ◊ú◊ß◊ë◊ú◊™ ◊†◊™◊ï◊†◊ô ◊û◊°◊ú◊ï◊ú ◊û-Google Directions API.
 * ◊û◊ï◊§◊¢◊ú◊™ ◊ô◊©◊ô◊®◊ï◊™ ◊û◊ê◊§◊ú◊ô◊ß◊¶◊ô◊ô◊™ ◊î◊ú◊ß◊ï◊ó.
 * ◊û◊¶◊§◊î ◊ú◊ß◊ë◊ú ◊ê◊ï◊ë◊ô◊ô◊ß◊ò data ◊¢◊ù ◊î◊û◊§◊™◊ó◊ï◊™ origin ◊ï-destination.
 * ◊û◊ó◊ñ◊ô◊®◊î ◊ê◊ï◊ë◊ô◊ô◊ß◊ò ◊¢◊ù ◊î◊û◊§◊™◊ó routeInfo ◊î◊û◊õ◊ô◊ú ◊ê◊™ ◊™◊©◊ï◊ë◊™ ◊î-API.
 */
exports.getRouteData = functions.https.onCall(async (data, context) => {

  // ◊ï◊ú◊ô◊ì◊¶◊ô◊î ◊ë◊°◊ô◊°◊ô◊™ ◊©◊ú ◊î◊ß◊ú◊ò
  if (!data || !data.origin || !data.destination) {
    functions.logger.error(
      "Missing origin or destination in request data.",
      data
    );
    throw new functions.https.HttpsError(
      "invalid-argument",
      "The function must be called with 'origin' and 'destination' arguments."
    );
  }

  const { origin, destination } = data;

  // ◊ß◊ë◊ú◊™ ◊û◊§◊™◊ó ◊î-API ◊û◊ß◊ï◊†◊§◊ô◊í◊ï◊®◊¶◊ô◊ô◊™ ◊î◊§◊ï◊†◊ß◊¶◊ô◊ï◊™
  // ◊ï◊ì◊ê ◊©◊î◊®◊¶◊™: firebase functions:config:set maps.key="..."
  // ◊©◊ô◊û◊ï◊© ◊ë-optional chaining ?. ◊ú◊û◊ß◊®◊î ◊©◊î◊î◊í◊ì◊®◊î ◊ú◊ê ◊ß◊ô◊ô◊û◊™
  const apiKey = functions.config().maps?.key;

  if (!apiKey) {
    functions.logger.error(
      "Maps API key not configured in functions config (maps.key)."
    );
    throw new functions.https.HttpsError(
      "internal",
      "Server configuration error."
    );
  }

  // ◊î◊õ◊†◊™ ◊î◊§◊®◊û◊ò◊®◊ô◊ù ◊ú◊ë◊ß◊©◊™ ◊î-Directions API
  const params = {
    origin: origin,
    destination: destination,
    key: apiKey, // ◊©◊ô◊û◊ï◊© ◊ë◊û◊§◊™◊ó ◊û◊î-config
  };

  try {
    functions.logger.info(
      `Requesting directions from ${origin} to ${destination}`
    );
    // ◊ß◊®◊ô◊ê◊î ◊ú-API ◊©◊ú Directions
    const response = await mapsClient.directions({
      params: params,
      timeout: 5000, // milliseconds
    });

    functions.logger.info(
      `Directions API response status: ${response.data.status}`
    );

    // ◊î◊ó◊ñ◊®◊™ ◊î◊û◊ô◊ì◊¢ ◊î◊®◊ú◊ï◊ï◊†◊ò◊ô ◊ú◊ê◊§◊ú◊ô◊ß◊¶◊ô◊ô◊™ ◊î◊ú◊ß◊ï◊ó
    // ◊õ◊ê◊ü ◊ê◊§◊©◊® ◊ú◊¢◊ë◊ì ◊ê◊™ ◊î◊™◊©◊ï◊ë◊î ◊ú◊§◊†◊ô ◊î◊©◊ú◊ô◊ó◊î ◊ê◊ù ◊®◊ï◊¶◊ô◊ù
    return { routeInfo: response.data };
  } catch (error) {
    functions.logger.error("Error calling Directions API:", error);
    // ◊î◊ì◊§◊°◊™ ◊©◊í◊ô◊ê◊î ◊°◊§◊¶◊ô◊§◊ô◊™ ◊û◊î-API ◊©◊ú ◊í◊ï◊í◊ú ◊ê◊ù ◊ß◊ô◊ô◊û◊™
    if (error.response) {
      functions.logger.error("Google Maps API Error:", error.response.data);
    }
    // ◊ñ◊®◊ô◊ß◊™ ◊©◊í◊ô◊ê◊î ◊©◊î◊ú◊ß◊ï◊ó ◊ô◊ß◊ë◊ú
    throw new functions.https.HttpsError(
      "internal",
      "Failed to get directions."
    );
  }
});

exports.sendNotificationToTokens = functions.https.onCall(async (data, context) => {
  try {
    console.log("üì• Received data keys:", Object.keys(data));

    const tokens = data?.data?.tokens;
    const title = data?.data?.title;
    const body = data?.data?.body;
    const rideId = data?.data?.rideId || "";
    const screen = data?.data?.screen || "";

    console.log("üì• tokens =", tokens);
    console.log("üì• typeof tokens =", typeof tokens);
    console.log("üì• isArray =", Array.isArray(tokens));

   if (!Array.isArray(tokens)) {
     console.error("‚ùå tokens is not an array or missing:", tokens);
     throw new functions.https.HttpsError("invalid-argument", "tokens must be a non-empty array");
   }

   if (tokens.length === 0) {
     console.error("‚ùå tokens array is empty");
     throw new functions.https.HttpsError("invalid-argument", "tokens array cannot be empty");
   }

   if (!title || typeof title !== "string" || title.trim() === "") {
     console.error("‚ùå title is missing or invalid:", title);
     throw new functions.https.HttpsError("invalid-argument", "title must be a non-empty string");
   }

   if (!body || typeof body !== "string" || body.trim() === "") {
     console.error("‚ùå body is missing or invalid:", body);
     throw new functions.https.HttpsError("invalid-argument", "body must be a non-empty string");
   }

   if (typeof screen !== "string" || screen.trim() === "") {
     console.error("‚ùå screen is missing or invalid:", screen);
     throw new functions.https.HttpsError("invalid-argument", "screen must be a non-empty string");
   }

    console.log(`üî¢ Tokens received: ${tokens.length}`);
    console.log(`üìù Title: ${title}`);
    console.log(`üìù Body: ${body}`);
    console.log(`üÜî Ride ID: ${rideId}`);
    console.log(`üéØ Screen Target: ${screen}`);

    const message = {
      notification: {
        title: title,
        body: body,
      },
      android: {
        notification: {
          icon: "ic_launcher_foreground",
        }
      },
      data: {
        //type: "passenger_notification",
        rideId: rideId,
        screen: screen,
        fromNotification: "true"
      },
      tokens: tokens
    };

    const response = await admin.messaging().sendEachForMulticast(message);
    console.log("üì¨ Multicast summary:", response.successCount, "sent,", response.failureCount, "failed");

    const results = await Promise.all(response.responses.map(async (res, index) => {
      const token = tokens[index];

      if (res.success) {
        console.log(`‚úÖ Notification sent to token: ${token}`);
        return { token, success: true };
      } else {
        const error = res.error;
        console.error(`‚ùå Failed to send to token: ${token}`, error);

        // Optionally remove invalid tokens from DB (if needed)
        if (
          error.code === 'messaging/registration-token-not-registered' ||
          error.code === 'messaging/invalid-argument'
        ) {
          try {
            // You can optionally delete token from wherever you store it
            console.warn(`üßπ Token invalid: ${token} ‚Äî remove manually if needed.`);
          } catch (deletionError) {
            console.error(`‚ùå Error removing token: ${token}`, deletionError);
          }
        }

        return { token, success: false, error: error.message };
      }
    }));

    return { success: true, results };

  } catch (err) {
    console.error("‚ùå Unexpected error in sendNotificationToTokens:", err);
    throw new functions.https.HttpsError("internal", err.message || "Unknown error");
  }
});

